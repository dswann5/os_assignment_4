Daniel Swann and Jerald Liu
dswann5@jhu.edu/liu.jerald@gmail.com
Operating Systems Fall 2015
10/20/15
Assignment 4: The Hacked Memory 

------------------------------------------------------------------------------
Part 1: Study, Design, Log 
// Motivation
Xv6, and any operating system in general, needs a way to have processes run independently of each other. In order to achieve this, each process has its own address space separate from all other processes' address spaces. Each user processes' address space is virtual and is translated into physical addresses through page tables. The page table of a process can be acccessed through the member pde_t pgdir member of the struct proc (2353).

// How the first address space is created: entry to main
The first address space is created in entry (1040). Here, page size extension is for 4MB pages is turned on, the address of the entrypgdir loaded into %cr3 (the register corresponding to the current pgdir), flags are set in %cr0 in order to enable paging, and the stack pointer is set. From here, we jmp to main().

// main
When the bootstrap processor starts running C code in main() (1217), kinit1() is called (1219, defined at 3030), which frees the 4MB immediately following the kernel code's address space via freerange() (3034). freerange() (3051) calls kfree() (3065), which adds the 4MB worth of page tables to freelist, a linked list of free pages. kvmalloc() is called (1857), which calls setupkvm(), which allocates the kernel part of the page table, zeroes out the entire page table, checks to see if the PHYSTOP is not within DEVSPACE, and if it is, it then maps available pages to the kernel parts of the page table, including I/O space, kernel text, kernel memory, and device space. At the end it returns the allocated pgdir. In kvmalloc(), we then call switchkvm() (1866), which switches to the pgtable that we just created by setupkvm(). 

Seginit() called at 1223 in main() sets up the global descriptor table to define the memory segments of each CPU. 

Startothers() called at 1236 starts the non-boot processors. It first writes the entry code to each processor's 0x7000 address which is unused at the moment. We load the binary for entryother.S into that address stored in the pointer variable called code. We then check for a cpu that hasn't been started yet. A stack is kalloc()'d to, we essentially pass entryother.S a place to enter and what page directory to use. Startothers() waits until the cpu has finished mpmain().

Kinit2() is called after startothers() in main(). This is used to free the remaining pages in the kernel up to PHYSTOP in similar fashion as kinit1(). We need the lock, however, because other processors may be accessing kernel memory at the same time -- we want to prevent this by means of the lock. The Boot Processor (BP) does not need to worry since it is guaranteed to run in isolation by nature of only a single processor booting xv6.

Userinit() is called after kinit2() in main(). Upon setting up the first process, we call setupkvm() in order to find an available page directory for the first process to have. We then load the binary for init into the process's pgdir. We need to do this since fork()/exec()'ing is not possible yet (there are no processes to call fork() or exec() at this point). Inituvm() (1903) kalloc()'s to a pointer mem. Mem is zeroed out in order to contain the binary for the init code. Mappages() maps physical addresses of pages to the beginning of virtual address 0 of pgdir. Memmove() actually moves the init binary into mem. Userinit() proceeds by setting up the process's trapframe, cwd, and state (RUNNABLE now).

Mpmain() is the last thing called in main(). It calls scheduler() to start running processes.

// Virtual Memory Layout
Each process contains an upper and lower virtual address space mapped to physical addresses for the kernel and user, respectively. Different processes' page tables translate user addresses to different pages of physical memory in order to ensure that each process has private user memory. All mappings in the kernel's virtual space exist so the kernel can run in every process's page table. These mappings are all above KERNBASE, where the virtual addresses KERNBASE:KERNBASE+PHYSTOP to the physical addresses 0:PHYSTOP. The PTE_U flag is not set for the PTEs above KERNBASE, since the user should not be able to access kernel code.

// ctx switching, forking, etc.
Upon fork()ing, fork() (2554) calls copyuvm() (2564) which copies the current state of the code of the current process in order for the child to execute on. Copyuvm() calls setupkvm() which sets up the kernel portion of the user address space. Then, given the sz of the parent's process table, we loops through increments of PAGESIZE in order to copy all the pages for the child. Walkpgdir() checks to find the page table entry in the parent's pgdira and returns it to copyuvm(). We then extract the physical address of the table and its flags and then perform mappages() on a kalloc'd page serving as a copy for the child. This essentially copies over the parent's page into the child's copy. For our assignment, we have to make this more efficient, because who is to say the child will even write to the page? We only want to copy over the pages that the child will write to. We will make our own version of copyuvm() to handle this.

// Notable findings
A 32-bit machine running xv6 can only have 4 GB of memory. This is due to the nature of page addressing. For a single machine, there are 2^10 possible page directory entries. And for each page directory entry pointing to a page table, there are 2^10 page table entries possible. 2^10*2^10*4096 = 4294967296 bytes = 4 GB, where 4096 is the size of a page. This is representative of the preconceived notion that most 32-bit machines can only have 4GB of memory.

----------Part2 Design----------
// Design thoughts
We essentially want to add an extra page to the bottom of the user address space. So upon initializing a process, we'll have to create some offsets of 4096 bytes (0x1000). Also, we must do some checks in syscalls that may try to access an address below 4096 bytes, like fetchint(), argptr(), etc. We figure that this part will not involve any additional data structures since all we're doing is changing certain values related to the process. 

We will test this by attempting to deference an address at 0, PGSIZE-1, and PGSIZE. Our null pointer handler should fail to dereference the address at 0 and PGSIZE-1, and succeed the dereference at PGSIZE. In addition, we must check for a null pointer passed to a syscall is handled correctly. Thus we will attempt to read into a buffer at addresses 0, PGSIZE-1, and PGSIZE. Read should fail gracefully (return -1) on the first two cases, and succeed to read on the third.

The included nulltest.c file performs these checks of null pointers. 

----------Part3 Design----------
// Design Thoughts
We thought about our reference counter data structure and came up with a few possible solutions:
1. Somehow include the reference counter in the unused bits of the pte_t struct - but there are only 4 bits available according to the documentation! We want to potentially store 2^6 == 64 (NPROC) possibilities each of our counters, as there can only be up to NPROC references to one page table. Although NPROC could potentially be more than 64, which would be bad...this is probably not the best option.
2. Allocate a data structure to hold each reference counter, e.g. a linked list of references. This would be memory-efficient, as we only hold a page of memory for the list. BUT, since this is a shared resource we will need to implement locking logic around it.

Part 2: NO moar NULL
// Realizations
We at one point forgot to set the p->sz to 2*PGSIZE since we've added a page to the bottom of user address space. This shouldn't have been a surprising aspect -- we just forgot.

// Modifications
    1) Makefile
        a. Changed location of where code starts in the user address space for initcode. Instead of 0, start at 0x1000, which is the size of one page.
        b. Changed location where code starts in the user address space for all user programs (ULIB). Instead of 0, start at 0x1000.
        c. Changed location of where code starts in the user address space for forktest. Instead of 0, start at 0x1000.
        d. We add a UPROG called _nulltest, a cutsom test we created to test that a trap 14 error happens when accessing the first page of a user program. We must also add nulltest.c to EXTRA.
    2) exec.c
        a. In the portion commented //Load program into memory, we want sz = PGSIZE, not 0. This is because we want to start loading the program into the 1st page as opposed to the 0th page, which we want to reserve for as a null space.
    3) proc.c
        a. userinit()
            i. change p->sz to PGSIZE*2 since the process now has 2 pages, one for null, and one for the initcode.
            ii. Set process's trapframe's stack pointer to PGSIZE*2 since the top of the stack is now offset by an additional page.
            iii. Set the process's trapframe's instruction pointer to PGSIZE because we want to start at the page with initcode in it, which is offset by PGSIZE bytes.
    4) syscall.c
        a. fetchint()
            i. check if addr is 0 in addition to checking if the address is within the process's address space.
        b. fetchstr() 
            i. check if addr is 0 in addition to checking if the address is within the process's address space.
        c. argptr()
            i. check if i, an address, is 0 in addition to checking that the pointer lies within process address space.
    5) vm.c
        a. inituvm()
            i. change second parameter of mappages to (void*)PGSIZE, since we do not want to map anything to the first page of the process's address space.
        b. copyuvm()
            i. Copy a page starting at PGSIZE instead of 0.

---------------------------------------------------------------------------------------------------------

Part 3: Forking Moo Cow
// Realizations 
We realized that we must store the reference count (up to NPROC possibilities) of each page somehow in order to determine whether it is at 1 (set it to read-only) or at zero (free the page from memory, aka add to free list). Initially we thought we could store a reference count in the pte's available bits itself, but then realized that NPROC could increase, and thus needed a larger space to store the possible values. The linked list we discussed earlier would require some dynamic memory allocation, but would theoretically take longer to traverse than a normal array. A static array of reference counters with no kalloc() required seemed to be the best option at this point.

We decided on a patented Big Array of 32-bit Integers technique, which is sized by calculating PHYSTOP/PGSIZE. Each index in the array corresponds to a page's reference. This is not entirely ideal, as we need exactly 14 pages of memory to store all 32-bit ints per page table entry. We then realized that with multiple CPUs, all operations (including lookup) on this array must be atomic in order to prevent race conditions, resulting in a necessary static lock on the static reference count array.

After some discussion in class, we also realized that we must flush the TLB after every page mutation, which essentially involved reloading the cr3 register according to online documentation. We added a small global x86 function flush_tlb() to trapasm.S in order to do so. 

Upon modifying copyuvm, we were almost certain that our implementation was correct. We spent hours trying to debug this. Although we were able to start up xv6, running anything from sh hung after execution. It turns out we needed to implement our reference counter functionality in order for this to work.

NWF's fork_read test also screwed us up, as we initially thought the kernel would never try to access userspace. We had a condional that checked for DPL_USER != 0 in our page fault trap handler, thus we were failing to handle the situation where the kernel pagefaulted when attempting to touch userspace. After we removed that conditional, NWF's tests worked as expected and we were happy.

// Modifications
    1) trap.c
        a. trap()
            i. We add a case for T_PGFLT, the page fault trap code, to the switch statement that checks for specific types of trap codes. 
    2) trapasm.S
        a. flush_tlb
            i. We want to flush the tranlsation lookaside buffer which caches addresses per CPU.
    3) vm.c
        a. ref_count
            i. The ref_count is a essentially a 14-page long array that holds counts of processes referencing a specific page table entry. We need this in order to know when to change the PTE_W flag.
        b. ref_lock
            i. We need to lock our ref_count array because processes could potentially be contending for that resource.
        c. allocuvm()
            i. we want to set the ref_count for a newly allocated page to 1.
        d. deallocuvm()
            i. this is essentially the inverse of allocuvm() -- we wish to decrement the ref_count of the specific page being freed from the ref_count array.
            ii. We also want to check if the ref_count of the page is 1. If so, the writeable flag must be turned off. If 0, then we free the address of the page and set the pte to null.
        e. copyuvm()
            i. When we are in copyuvm() we want to set the flag of the pte we are copying to read-only, which means zeroing out the Writable flag. We take the physical address of that and use mappages() to map the contents of pte to our copy of the page table entry. We increase the ref_count for this page since another prrocess is going to use it.
            ii. We flush_tlb() at the end (described above in point (2))
        f. handle_page_fault()
            i. This is called from trap.c in our switch case for a page fault.
            ii. We first check of the address given by rcr2() in trap.c is a valid user address.
            iii. We find the pte of the address using walkpgdir and check if the pte is valid and if it is present (PTE_P).
            iv. If there's only one reference to this page, we set it to readable. Otherwise, we make a copy of this page and set its flag to writeable.
            v. We flush the address cache (flush_tlb()) at the end and return 0.
